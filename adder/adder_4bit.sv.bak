
module binary_adder_4bit (
    input  logic [3:0] A,  // First operand
    input  logic [3:0] B,  // Second operand
    output logic [3:0] SUM, // Sum result
    output logic COUT      // Carry-out
);
    logic [3:0] carry;      // Carry for each bit
    logic [3:0] xor_ab;     // XOR of A and B for each bit
    logic [3:0] and_ab;     // AND of A and B for each bit
    logic [3:0] sum_intermediate; // Intermediate sum calculations

    // Bit 0
    assign xor_ab[0] = ~(~A[0] & ~B[0]) & ~(A[0] & B[0]); // XOR
    assign and_ab[0] = A[0] & B[0]; // AND
    assign sum_intermediate[0] = ~(~xor_ab[0] & ~1'b0) & ~(xor_ab[0] & 1'b0); // XOR with carry-in
    assign carry[0] = and_ab[0]; // Carry-out

    // Bit 1
    assign xor_ab[1] = ~(~A[1] & ~B[1]) & ~(A[1] & B[1]); // XOR
    assign and_ab[1] = A[1] & B[1]; // AND
    assign sum_intermediate[1] = ~(~xor_ab[1] & ~carry[0]) & ~(xor_ab[1] & carry[0]); // XOR with carry-in
    assign carry[1] = and_ab[1] | (carry[0] & xor_ab[1]); // Carry-out

    // Bit 2
    assign xor_ab[2] = ~(~A[2] & ~B[2]) & ~(A[2] & B[2]); // XOR
    assign and_ab[2] = A[2] & B[2]; // AND
    assign sum_intermediate[2] = ~(~xor_ab[2] & ~carry[1]) & ~(xor_ab[2] & carry[1]); // XOR with carry-in
    assign carry[2] = and_ab[2] | (carry[1] & xor_ab[2]); // Carry-out

    // Bit 3
    assign xor_ab[3] = ~(~A[3] & ~B[3]) & ~(A[3] & B[3]); // XOR
    assign and_ab[3] = A[3] & B[3]; // AND
    assign sum_intermediate[3] = ~(~xor_ab[3] & ~carry[2]) & ~(xor_ab[3] & carry[2]); // XOR with carry-in
    assign carry[3] = and_ab[3] | (carry[2] & xor_ab[3]); // Carry-out

    // Final Outputs
    assign SUM = sum_intermediate; 
    assign COUT = carry[3];

endmodule